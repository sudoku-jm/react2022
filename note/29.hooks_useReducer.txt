# Hooks - useReducer
예시 : Day08 Test9.js


분리 ( redux , context 에서 사용 ) 
https://ko.reactjs.org/docs/hooks-reference.html#usereducer


useState의 대체 함수입니다.
(state, action) => newState의 형태로 reducer를 받고 (필수)
dispatch 메서드와 짝의 형태로 현재 state를 반환합니다. 

const [state, dispatch] = useReducer(reducer, initialArg, init);

(Redux에 익숙하다면 이것이 어떻게 동작하는지 여러분은 이미 알고 있을 것입니다.)
redux에서는 useReducer가 필수.

다수의 하윗값을 포함하는 복잡한 정적 로직을 만드는 경우나 다음 state가 이전 state에 의존적인 경우에 보통 useState보다 useReducer를 선호합니다. 

또한 useReducer는 자세한 업데이트를 트리거 하는 컴포넌트의 성능을 최적화할 수 있게 하는데, 이것은 콜백 대신 dispatch를 전달 할 수 있기 때문입니다.




const [state, dispatch] = useReducer(reducer, initialArg, init);

state : 상태 데이터 (이름 임의대로 쓸 수 있음)
dispatch : 액션을 발생시키는 함수(액션을 보내는 곳, 액션 전달자)
reducer : 상태분리함수 (이름 임의) - 상태 업데이트 로직을 담은 함수
initialState : 초기값

===============================

(예)
const initialState = {count: 0};

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return {count: state.count + 1};
    case 'decrement':
      return {count: state.count - 1};
    default:
      throw new Error();
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);
  return (
    <>
      Count: {state.count}
      <button onClick={() => dispatch({type: 'decrement'})}>-</button>
      <button onClick={() => dispatch({type: 'increment'})}>+</button>
    </>
  );
}
-----

dispatch({type: 'decrement'}
dispatch({type: '액션명'}

1.type 필수 - 액션명(별명, 별칭) : 소문자, 대문자, 한글 가능
                                   주로 대문자로 작성한다.

  dispatch({type : '액션명', 키1: 값, 키2:값})
  aciton.type 
  aciton.키1
  action.키2
  로 찾아감.


  상태분리로직
  function 함수명(state, action) {
  switch (action.type) {
    case '액션명':
      return 넘길값;
    default:
      throw state;
  }
}

-----
Day08 
action.키 예제 (Test11.js, Test12.js, Test13.js,Test14.js)
-----
